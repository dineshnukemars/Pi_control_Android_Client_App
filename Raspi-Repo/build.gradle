apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.google.protobuf'


android {
    compileSdkVersion 30
    buildToolsVersion "30.0.2"

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation project(":coreLibs")
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.1'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.9'

    // Grpc and Protobuf
    implementation("io.grpc:grpc-kotlin-stub:0.1.3"){
        [new Tuple('com.google.protobuf','protobuf-java'),
         new Tuple( 'javax.annotation','javax.annotation-api')].each {
            exclude group: "${it.get(0)}", module: "${it.get(1)}"
        }
    }
    implementation 'io.grpc:grpc-okhttp:1.31.1'
    implementation 'io.grpc:grpc-protobuf-lite:1.31.1'
    implementation 'io.grpc:grpc-stub:1.31.1'
    implementation group: 'io.grpc', name: 'grpc-core', version: '1.31.1'
    implementation 'org.apache.tomcat:annotations-api:6.0.53'
}

protobuf {
    protoc { artifact = "com.google.protobuf:protoc:4.0.0-rc-2" }
    plugins {
        // Specify protoc to generate using kotlin protobuf plugin
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:1.31.1"
        }
        grpckt {
            artifact = "io.grpc:protoc-gen-grpc-kotlin:0.1.5"
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java { option 'lite' }
            }
            task.plugins {
                // Generate Java gRPC classes
                grpc { option 'lite' }
                // Generate Kotlin gRPC using the custom plugin from library
//                grpckt { option 'lite' }
            }
        }
    }
}